// Copyright (c) 2025 NTT InfraNet
const { readdirSync, lstatSync, writeFileSync } = require('fs')
const { join } = require('path')
const { build, formats } = require('documentation')
const YAML = require('json-to-pretty-yaml')
const _ = require('lodash')

const pluginsSource = 'src/plugins'
const docsSource = `../../documentation/guides/Plugins/`
const buildOptions = { documentExported: true }
const configFileName = 'documentation.yml'

// Document this as main props of a plugin
const pluginPropsIndex = [
  'components',
  'reducer',
  'actions',
  'routes',
  'saga',
  'i18n',
  'services'
]

// Ignore default and index methods that does not provide info to the documents
const ignoredProps = ['default', 'index']

const documentationJsDefaultComment = `<!-- Generated by documentation.js. Update this documentation by updating the source code. -->\n`

async function run () {
  const plugins = getPlugins()
  const pluginsDocs = await Promise.all(
    plugins.map(name => constructPlugin(name))
  )

  plugins.forEach((pluginName, index) => {
    storePluginToc(pluginName, pluginsDocs[index])
  })

  await Promise.all(plugins.map(buildAndSaveDocs))
}

// Stores the toc (table of content) into the ${configFileName} file
function storePluginToc (pluginName, pluginDocs) {
  writeFileSync(
    join(pluginsSource, pluginName, configFileName),
    buildToc(pluginDocs),
    {
      encoding: 'utf8'
    }
  )
}

async function constructPlugin (pluginName) {
  const pluginProps = await Promise.all(
    pluginPropsIndex.map(async propName => {
      const path = join(pluginsSource, pluginName, propName)
      const pluginPropsDocs = await build([path, `${path}.js`], {
        ...buildOptions
      })

      return {
        name: capitalize(propName),
        children: _.uniq(
          pluginPropsDocs
            .map(({ name }) => name)
            .filter(name => !ignoredProps.includes(name))
        )
      }
    })
  )

  return pluginProps.filter(({ children }) => children.length > 0)
}

function getPlugins () {
  return readdirSync(pluginsSource).filter(name =>
    lstatSync(join(pluginsSource, name)).isDirectory()
  )
}

/*
async function getModuleDocs (moduleName) {
  return build([join(pluginsSource, moduleName)], {
    documentExported: true
  })
}
*/

function buildToc (moduleObjects) {
  if (moduleObjects.length === 0) {
    return ''
  }

  return YAML.stringify({
    toc: moduleObjects
  })
}

async function buildAndSaveDocs (pluginName) {
  const options = {
    'project-name': pluginName,
    config: join(pluginsSource, pluginName, configFileName),
    documentExported: true
  }

  const docs = await build(join(pluginsSource, pluginName), options)
  const mdDocs = await formats.md(
    docs.filter(({ name }) => !ignoredProps.includes(name))
  )
  const prunedDocs = mdDocs.replace(documentationJsDefaultComment, '')

  writeFileSync(join(docsSource, `client-${pluginName}.md`), prunedDocs, {
    encoding: 'utf8'
  })
}

function capitalize (string) {
  if (typeof string !== 'string') return ''
  return string.charAt(0).toUpperCase() + string.slice(1)
}

run()
